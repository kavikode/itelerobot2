// Generated by gencpp from file extended_object_detection/SetSimpleObjectsResponse.msg
// DO NOT EDIT!


#ifndef EXTENDED_OBJECT_DETECTION_MESSAGE_SETSIMPLEOBJECTSRESPONSE_H
#define EXTENDED_OBJECT_DETECTION_MESSAGE_SETSIMPLEOBJECTSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace extended_object_detection
{
template <class ContainerAllocator>
struct SetSimpleObjectsResponse_
{
  typedef SetSimpleObjectsResponse_<ContainerAllocator> Type;

  SetSimpleObjectsResponse_()
    : result()  {
    }
  SetSimpleObjectsResponse_(const ContainerAllocator& _alloc)
    : result(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _result_type;
  _result_type result;





  typedef boost::shared_ptr< ::extended_object_detection::SetSimpleObjectsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::extended_object_detection::SetSimpleObjectsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SetSimpleObjectsResponse_

typedef ::extended_object_detection::SetSimpleObjectsResponse_<std::allocator<void> > SetSimpleObjectsResponse;

typedef boost::shared_ptr< ::extended_object_detection::SetSimpleObjectsResponse > SetSimpleObjectsResponsePtr;
typedef boost::shared_ptr< ::extended_object_detection::SetSimpleObjectsResponse const> SetSimpleObjectsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::extended_object_detection::SetSimpleObjectsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::extended_object_detection::SetSimpleObjectsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::extended_object_detection::SetSimpleObjectsResponse_<ContainerAllocator1> & lhs, const ::extended_object_detection::SetSimpleObjectsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::extended_object_detection::SetSimpleObjectsResponse_<ContainerAllocator1> & lhs, const ::extended_object_detection::SetSimpleObjectsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace extended_object_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::extended_object_detection::SetSimpleObjectsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::extended_object_detection::SetSimpleObjectsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::extended_object_detection::SetSimpleObjectsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::extended_object_detection::SetSimpleObjectsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::extended_object_detection::SetSimpleObjectsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::extended_object_detection::SetSimpleObjectsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::extended_object_detection::SetSimpleObjectsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "67cdd51ca1859f10c723484b0bc5b1b6";
  }

  static const char* value(const ::extended_object_detection::SetSimpleObjectsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x67cdd51ca1859f10ULL;
  static const uint64_t static_value2 = 0xc723484b0bc5b1b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::extended_object_detection::SetSimpleObjectsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "extended_object_detection/SetSimpleObjectsResponse";
  }

  static const char* value(const ::extended_object_detection::SetSimpleObjectsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::extended_object_detection::SetSimpleObjectsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# List of objects in detection queue after changes\n"
"int64[] result\n"
"\n"
;
  }

  static const char* value(const ::extended_object_detection::SetSimpleObjectsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::extended_object_detection::SetSimpleObjectsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetSimpleObjectsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::extended_object_detection::SetSimpleObjectsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::extended_object_detection::SetSimpleObjectsResponse_<ContainerAllocator>& v)
  {
    s << indent << "result[]" << std::endl;
    for (size_t i = 0; i < v.result.size(); ++i)
    {
      s << indent << "  result[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.result[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXTENDED_OBJECT_DETECTION_MESSAGE_SETSIMPLEOBJECTSRESPONSE_H
