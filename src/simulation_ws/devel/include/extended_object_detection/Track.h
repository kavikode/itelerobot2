// Generated by gencpp from file extended_object_detection/Track.msg
// DO NOT EDIT!


#ifndef EXTENDED_OBJECT_DETECTION_MESSAGE_TRACK_H
#define EXTENDED_OBJECT_DETECTION_MESSAGE_TRACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace extended_object_detection
{
template <class ContainerAllocator>
struct Track_
{
  typedef Track_<ContainerAllocator> Type;

  Track_()
    : id(0)
    , status(0)  {
    }
  Track_(const ContainerAllocator& _alloc)
    : id(0)
    , status(0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef uint8_t _status_type;
  _status_type status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DETECTED)
  #undef DETECTED
#endif
#if defined(_WIN32) && defined(TRACKED)
  #undef TRACKED
#endif
#if defined(_WIN32) && defined(LOST)
  #undef LOST
#endif

  enum {
    DETECTED = 1u,
    TRACKED = 2u,
    LOST = 3u,
  };


  typedef boost::shared_ptr< ::extended_object_detection::Track_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::extended_object_detection::Track_<ContainerAllocator> const> ConstPtr;

}; // struct Track_

typedef ::extended_object_detection::Track_<std::allocator<void> > Track;

typedef boost::shared_ptr< ::extended_object_detection::Track > TrackPtr;
typedef boost::shared_ptr< ::extended_object_detection::Track const> TrackConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::extended_object_detection::Track_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::extended_object_detection::Track_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::extended_object_detection::Track_<ContainerAllocator1> & lhs, const ::extended_object_detection::Track_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::extended_object_detection::Track_<ContainerAllocator1> & lhs, const ::extended_object_detection::Track_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace extended_object_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::extended_object_detection::Track_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::extended_object_detection::Track_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::extended_object_detection::Track_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::extended_object_detection::Track_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::extended_object_detection::Track_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::extended_object_detection::Track_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::extended_object_detection::Track_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ec99f63be21cc6a42fd795d224533ab1";
  }

  static const char* value(const ::extended_object_detection::Track_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xec99f63be21cc6a4ULL;
  static const uint64_t static_value2 = 0x2fd795d224533ab1ULL;
};

template<class ContainerAllocator>
struct DataType< ::extended_object_detection::Track_<ContainerAllocator> >
{
  static const char* value()
  {
    return "extended_object_detection/Track";
  }

  static const char* value(const ::extended_object_detection::Track_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::extended_object_detection::Track_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 DETECTED = 1  # Current result is obtained by detector\n"
"uint8 TRACKED = 2  # Current result is obtained by opencv tracker\n"
"uint8 LOST = 3      # Failed to obtain result, this is last saved\n"
"\n"
"int32 id            # track unique id (in group of one object)\n"
"uint8 status        # status described above\n"
"#extended_object_detection/ImagePoint[] image_point_history\n"
"#geometry_msgs/Transform[] transform_history\n"
;
  }

  static const char* value(const ::extended_object_detection::Track_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::extended_object_detection::Track_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Track_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::extended_object_detection::Track_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::extended_object_detection::Track_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXTENDED_OBJECT_DETECTION_MESSAGE_TRACK_H
