// Generated by gencpp from file extended_object_detection/Contour.msg
// DO NOT EDIT!


#ifndef EXTENDED_OBJECT_DETECTION_MESSAGE_CONTOUR_H
#define EXTENDED_OBJECT_DETECTION_MESSAGE_CONTOUR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <extended_object_detection/ImagePoint.h>
#include <geometry_msgs/Vector3.h>

namespace extended_object_detection
{
template <class ContainerAllocator>
struct Contour_
{
  typedef Contour_<ContainerAllocator> Type;

  Contour_()
    : image_points()
    , contourTranslates()  {
    }
  Contour_(const ContainerAllocator& _alloc)
    : image_points(_alloc)
    , contourTranslates(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::extended_object_detection::ImagePoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::extended_object_detection::ImagePoint_<ContainerAllocator> >::other >  _image_points_type;
  _image_points_type image_points;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _contourTranslates_type;
  _contourTranslates_type contourTranslates;





  typedef boost::shared_ptr< ::extended_object_detection::Contour_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::extended_object_detection::Contour_<ContainerAllocator> const> ConstPtr;

}; // struct Contour_

typedef ::extended_object_detection::Contour_<std::allocator<void> > Contour;

typedef boost::shared_ptr< ::extended_object_detection::Contour > ContourPtr;
typedef boost::shared_ptr< ::extended_object_detection::Contour const> ContourConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::extended_object_detection::Contour_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::extended_object_detection::Contour_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::extended_object_detection::Contour_<ContainerAllocator1> & lhs, const ::extended_object_detection::Contour_<ContainerAllocator2> & rhs)
{
  return lhs.image_points == rhs.image_points &&
    lhs.contourTranslates == rhs.contourTranslates;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::extended_object_detection::Contour_<ContainerAllocator1> & lhs, const ::extended_object_detection::Contour_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace extended_object_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::extended_object_detection::Contour_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::extended_object_detection::Contour_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::extended_object_detection::Contour_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::extended_object_detection::Contour_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::extended_object_detection::Contour_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::extended_object_detection::Contour_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::extended_object_detection::Contour_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff58bd338df15e277a5ae5e64f7a36f1";
  }

  static const char* value(const ::extended_object_detection::Contour_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xff58bd338df15e27ULL;
  static const uint64_t static_value2 = 0x7a5ae5e64f7a36f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::extended_object_detection::Contour_<ContainerAllocator> >
{
  static const char* value()
  {
    return "extended_object_detection/Contour";
  }

  static const char* value(const ::extended_object_detection::Contour_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::extended_object_detection::Contour_<ContainerAllocator> >
{
  static const char* value()
  {
    return "extended_object_detection/ImagePoint[] image_points   # points on image\n"
"geometry_msgs/Vector3[] contourTranslates             # translations to contour points\n"
"\n"
"================================================================================\n"
"MSG: extended_object_detection/ImagePoint\n"
"int32 x\n"
"int32 y\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::extended_object_detection::Contour_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::extended_object_detection::Contour_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.image_points);
      stream.next(m.contourTranslates);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Contour_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::extended_object_detection::Contour_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::extended_object_detection::Contour_<ContainerAllocator>& v)
  {
    s << indent << "image_points[]" << std::endl;
    for (size_t i = 0; i < v.image_points.size(); ++i)
    {
      s << indent << "  image_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::extended_object_detection::ImagePoint_<ContainerAllocator> >::stream(s, indent + "    ", v.image_points[i]);
    }
    s << indent << "contourTranslates[]" << std::endl;
    for (size_t i = 0; i < v.contourTranslates.size(); ++i)
    {
      s << indent << "  contourTranslates[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.contourTranslates[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXTENDED_OBJECT_DETECTION_MESSAGE_CONTOUR_H
