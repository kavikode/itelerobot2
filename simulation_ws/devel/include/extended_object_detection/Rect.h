// Generated by gencpp from file extended_object_detection/Rect.msg
// DO NOT EDIT!


#ifndef EXTENDED_OBJECT_DETECTION_MESSAGE_RECT_H
#define EXTENDED_OBJECT_DETECTION_MESSAGE_RECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <extended_object_detection/ImagePoint.h>
#include <extended_object_detection/ImagePoint.h>
#include <geometry_msgs/Vector3.h>

namespace extended_object_detection
{
template <class ContainerAllocator>
struct Rect_
{
  typedef Rect_<ContainerAllocator> Type;

  Rect_()
    : left_bottom()
    , right_up()
    , cornerTranslates()  {
    }
  Rect_(const ContainerAllocator& _alloc)
    : left_bottom(_alloc)
    , right_up(_alloc)
    , cornerTranslates(_alloc)  {
  (void)_alloc;
    }



   typedef  ::extended_object_detection::ImagePoint_<ContainerAllocator>  _left_bottom_type;
  _left_bottom_type left_bottom;

   typedef  ::extended_object_detection::ImagePoint_<ContainerAllocator>  _right_up_type;
  _right_up_type right_up;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Vector3_<ContainerAllocator> >::other >  _cornerTranslates_type;
  _cornerTranslates_type cornerTranslates;





  typedef boost::shared_ptr< ::extended_object_detection::Rect_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::extended_object_detection::Rect_<ContainerAllocator> const> ConstPtr;

}; // struct Rect_

typedef ::extended_object_detection::Rect_<std::allocator<void> > Rect;

typedef boost::shared_ptr< ::extended_object_detection::Rect > RectPtr;
typedef boost::shared_ptr< ::extended_object_detection::Rect const> RectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::extended_object_detection::Rect_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::extended_object_detection::Rect_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::extended_object_detection::Rect_<ContainerAllocator1> & lhs, const ::extended_object_detection::Rect_<ContainerAllocator2> & rhs)
{
  return lhs.left_bottom == rhs.left_bottom &&
    lhs.right_up == rhs.right_up &&
    lhs.cornerTranslates == rhs.cornerTranslates;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::extended_object_detection::Rect_<ContainerAllocator1> & lhs, const ::extended_object_detection::Rect_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace extended_object_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::extended_object_detection::Rect_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::extended_object_detection::Rect_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::extended_object_detection::Rect_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::extended_object_detection::Rect_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::extended_object_detection::Rect_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::extended_object_detection::Rect_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::extended_object_detection::Rect_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b1bcb70028ba76b66f0308494067e67d";
  }

  static const char* value(const ::extended_object_detection::Rect_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb1bcb70028ba76b6ULL;
  static const uint64_t static_value2 = 0x6f0308494067e67dULL;
};

template<class ContainerAllocator>
struct DataType< ::extended_object_detection::Rect_<ContainerAllocator> >
{
  static const char* value()
  {
    return "extended_object_detection/Rect";
  }

  static const char* value(const ::extended_object_detection::Rect_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::extended_object_detection::Rect_<ContainerAllocator> >
{
  static const char* value()
  {
    return "extended_object_detection/ImagePoint left_bottom\n"
"extended_object_detection/ImagePoint right_up\n"
"geometry_msgs/Vector3[] cornerTranslates    # translate to rect corners, from bottom left in clock-wice direction, if z value is 1, it means that it is unit vector in homogeneous coordnates \n"
"\n"
"\n"
"================================================================================\n"
"MSG: extended_object_detection/ImagePoint\n"
"int32 x\n"
"int32 y\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::extended_object_detection::Rect_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::extended_object_detection::Rect_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_bottom);
      stream.next(m.right_up);
      stream.next(m.cornerTranslates);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Rect_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::extended_object_detection::Rect_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::extended_object_detection::Rect_<ContainerAllocator>& v)
  {
    s << indent << "left_bottom: ";
    s << std::endl;
    Printer< ::extended_object_detection::ImagePoint_<ContainerAllocator> >::stream(s, indent + "  ", v.left_bottom);
    s << indent << "right_up: ";
    s << std::endl;
    Printer< ::extended_object_detection::ImagePoint_<ContainerAllocator> >::stream(s, indent + "  ", v.right_up);
    s << indent << "cornerTranslates[]" << std::endl;
    for (size_t i = 0; i < v.cornerTranslates.size(); ++i)
    {
      s << indent << "  cornerTranslates[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.cornerTranslates[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXTENDED_OBJECT_DETECTION_MESSAGE_RECT_H
