// Generated by gencpp from file extended_object_detection/SetSimpleObjectsRequest.msg
// DO NOT EDIT!


#ifndef EXTENDED_OBJECT_DETECTION_MESSAGE_SETSIMPLEOBJECTSREQUEST_H
#define EXTENDED_OBJECT_DETECTION_MESSAGE_SETSIMPLEOBJECTSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace extended_object_detection
{
template <class ContainerAllocator>
struct SetSimpleObjectsRequest_
{
  typedef SetSimpleObjectsRequest_<ContainerAllocator> Type;

  SetSimpleObjectsRequest_()
    : changes()
    , remove_all(false)
    , add_all(false)  {
    }
  SetSimpleObjectsRequest_(const ContainerAllocator& _alloc)
    : changes(_alloc)
    , remove_all(false)
    , add_all(false)  {
  (void)_alloc;
    }



   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _changes_type;
  _changes_type changes;

   typedef uint8_t _remove_all_type;
  _remove_all_type remove_all;

   typedef uint8_t _add_all_type;
  _add_all_type add_all;





  typedef boost::shared_ptr< ::extended_object_detection::SetSimpleObjectsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::extended_object_detection::SetSimpleObjectsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetSimpleObjectsRequest_

typedef ::extended_object_detection::SetSimpleObjectsRequest_<std::allocator<void> > SetSimpleObjectsRequest;

typedef boost::shared_ptr< ::extended_object_detection::SetSimpleObjectsRequest > SetSimpleObjectsRequestPtr;
typedef boost::shared_ptr< ::extended_object_detection::SetSimpleObjectsRequest const> SetSimpleObjectsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::extended_object_detection::SetSimpleObjectsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::extended_object_detection::SetSimpleObjectsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::extended_object_detection::SetSimpleObjectsRequest_<ContainerAllocator1> & lhs, const ::extended_object_detection::SetSimpleObjectsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.changes == rhs.changes &&
    lhs.remove_all == rhs.remove_all &&
    lhs.add_all == rhs.add_all;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::extended_object_detection::SetSimpleObjectsRequest_<ContainerAllocator1> & lhs, const ::extended_object_detection::SetSimpleObjectsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace extended_object_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::extended_object_detection::SetSimpleObjectsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::extended_object_detection::SetSimpleObjectsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::extended_object_detection::SetSimpleObjectsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::extended_object_detection::SetSimpleObjectsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::extended_object_detection::SetSimpleObjectsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::extended_object_detection::SetSimpleObjectsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::extended_object_detection::SetSimpleObjectsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "58d90aa277946aa2923de4e9d2804806";
  }

  static const char* value(const ::extended_object_detection::SetSimpleObjectsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x58d90aa277946aa2ULL;
  static const uint64_t static_value2 = 0x923de4e9d2804806ULL;
};

template<class ContainerAllocator>
struct DataType< ::extended_object_detection::SetSimpleObjectsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "extended_object_detection/SetSimpleObjectsRequest";
  }

  static const char* value(const ::extended_object_detection::SetSimpleObjectsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::extended_object_detection::SetSimpleObjectsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Asks to remove or add objects to detection queue by its ID's\n"
"\n"
"# List of changes, contains objects ID\n"
"# For remove object from detection queue add its id with negative sign\n"
"# To add object to detection queue add its id\n"
"int64[] changes\n"
"\n"
"# if true removes all objects (node detects nothing)\n"
"bool remove_all\n"
"\n"
"# if true includes all objects from base to detection queue \n"
"bool add_all\n"
"\n"
"# if both remove_all and add_all are true, does nothing\n"
;
  }

  static const char* value(const ::extended_object_detection::SetSimpleObjectsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::extended_object_detection::SetSimpleObjectsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.changes);
      stream.next(m.remove_all);
      stream.next(m.add_all);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetSimpleObjectsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::extended_object_detection::SetSimpleObjectsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::extended_object_detection::SetSimpleObjectsRequest_<ContainerAllocator>& v)
  {
    s << indent << "changes[]" << std::endl;
    for (size_t i = 0; i < v.changes.size(); ++i)
    {
      s << indent << "  changes[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.changes[i]);
    }
    s << indent << "remove_all: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.remove_all);
    s << indent << "add_all: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.add_all);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXTENDED_OBJECT_DETECTION_MESSAGE_SETSIMPLEOBJECTSREQUEST_H
