// Generated by gencpp from file extended_object_detection/SimpleObject.msg
// DO NOT EDIT!


#ifndef EXTENDED_OBJECT_DETECTION_MESSAGE_SIMPLEOBJECT_H
#define EXTENDED_OBJECT_DETECTION_MESSAGE_SIMPLEOBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <extended_object_detection/ExtractedInfo.h>
#include <geometry_msgs/Transform.h>
#include <extended_object_detection/Rect.h>
#include <extended_object_detection/Contour.h>
#include <extended_object_detection/Track.h>

namespace extended_object_detection
{
template <class ContainerAllocator>
struct SimpleObject_
{
  typedef SimpleObject_<ContainerAllocator> Type;

  SimpleObject_()
    : type_id(0)
    , type_name()
    , score(0.0)
    , extracted_info()
    , transform()
    , rect()
    , contour()
    , track()  {
    }
  SimpleObject_(const ContainerAllocator& _alloc)
    : type_id(0)
    , type_name(_alloc)
    , score(0.0)
    , extracted_info(_alloc)
    , transform(_alloc)
    , rect(_alloc)
    , contour(_alloc)
    , track(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _type_id_type;
  _type_id_type type_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_name_type;
  _type_name_type type_name;

   typedef double _score_type;
  _score_type score;

   typedef std::vector< ::extended_object_detection::ExtractedInfo_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::extended_object_detection::ExtractedInfo_<ContainerAllocator> >::other >  _extracted_info_type;
  _extracted_info_type extracted_info;

   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _transform_type;
  _transform_type transform;

   typedef  ::extended_object_detection::Rect_<ContainerAllocator>  _rect_type;
  _rect_type rect;

   typedef  ::extended_object_detection::Contour_<ContainerAllocator>  _contour_type;
  _contour_type contour;

   typedef  ::extended_object_detection::Track_<ContainerAllocator>  _track_type;
  _track_type track;





  typedef boost::shared_ptr< ::extended_object_detection::SimpleObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::extended_object_detection::SimpleObject_<ContainerAllocator> const> ConstPtr;

}; // struct SimpleObject_

typedef ::extended_object_detection::SimpleObject_<std::allocator<void> > SimpleObject;

typedef boost::shared_ptr< ::extended_object_detection::SimpleObject > SimpleObjectPtr;
typedef boost::shared_ptr< ::extended_object_detection::SimpleObject const> SimpleObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::extended_object_detection::SimpleObject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::extended_object_detection::SimpleObject_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::extended_object_detection::SimpleObject_<ContainerAllocator1> & lhs, const ::extended_object_detection::SimpleObject_<ContainerAllocator2> & rhs)
{
  return lhs.type_id == rhs.type_id &&
    lhs.type_name == rhs.type_name &&
    lhs.score == rhs.score &&
    lhs.extracted_info == rhs.extracted_info &&
    lhs.transform == rhs.transform &&
    lhs.rect == rhs.rect &&
    lhs.contour == rhs.contour &&
    lhs.track == rhs.track;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::extended_object_detection::SimpleObject_<ContainerAllocator1> & lhs, const ::extended_object_detection::SimpleObject_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace extended_object_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::extended_object_detection::SimpleObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::extended_object_detection::SimpleObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::extended_object_detection::SimpleObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::extended_object_detection::SimpleObject_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::extended_object_detection::SimpleObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::extended_object_detection::SimpleObject_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::extended_object_detection::SimpleObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "025fc204af6671be7405ca314b787523";
  }

  static const char* value(const ::extended_object_detection::SimpleObject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x025fc204af6671beULL;
  static const uint64_t static_value2 = 0x7405ca314b787523ULL;
};

template<class ContainerAllocator>
struct DataType< ::extended_object_detection::SimpleObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "extended_object_detection/SimpleObject";
  }

  static const char* value(const ::extended_object_detection::SimpleObject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::extended_object_detection::SimpleObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# object info\n"
"int32 type_id                               # id of type, corresponded to object base\n"
"string type_name                            # name of type, corresponded to object base\n"
"float64 score                               # confidence coefficient of current result\n"
"extended_object_detection/ExtractedInfo[] extracted_info\n"
"\n"
"# object position and geometry\n"
"geometry_msgs/Transform transform           # transform to object center\n"
"extended_object_detection/Rect rect         # object frames on image and 3d coordinates\n"
"extended_object_detection/Contour contour   # contour image and 3d info\n"
"\n"
"# tracking\n"
"extended_object_detection/Track track       # information about tracking if it is enabled\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: extended_object_detection/ExtractedInfo\n"
"int32 sub_id\n"
"string text\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: extended_object_detection/Rect\n"
"extended_object_detection/ImagePoint left_bottom\n"
"extended_object_detection/ImagePoint right_up\n"
"geometry_msgs/Vector3[] cornerTranslates    # translate to rect corners, from bottom left in clock-wice direction, if z value is 1, it means that it is unit vector in homogeneous coordnates \n"
"\n"
"\n"
"================================================================================\n"
"MSG: extended_object_detection/ImagePoint\n"
"int32 x\n"
"int32 y\n"
"\n"
"================================================================================\n"
"MSG: extended_object_detection/Contour\n"
"extended_object_detection/ImagePoint[] image_points   # points on image\n"
"geometry_msgs/Vector3[] contourTranslates             # translations to contour points\n"
"\n"
"================================================================================\n"
"MSG: extended_object_detection/Track\n"
"uint8 DETECTED = 1  # Current result is obtained by detector\n"
"uint8 TRACKED = 2  # Current result is obtained by opencv tracker\n"
"uint8 LOST = 3      # Failed to obtain result, this is last saved\n"
"\n"
"int32 id            # track unique id (in group of one object)\n"
"uint8 status        # status described above\n"
"#extended_object_detection/ImagePoint[] image_point_history\n"
"#geometry_msgs/Transform[] transform_history\n"
;
  }

  static const char* value(const ::extended_object_detection::SimpleObject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::extended_object_detection::SimpleObject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type_id);
      stream.next(m.type_name);
      stream.next(m.score);
      stream.next(m.extracted_info);
      stream.next(m.transform);
      stream.next(m.rect);
      stream.next(m.contour);
      stream.next(m.track);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SimpleObject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::extended_object_detection::SimpleObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::extended_object_detection::SimpleObject_<ContainerAllocator>& v)
  {
    s << indent << "type_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type_id);
    s << indent << "type_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type_name);
    s << indent << "score: ";
    Printer<double>::stream(s, indent + "  ", v.score);
    s << indent << "extracted_info[]" << std::endl;
    for (size_t i = 0; i < v.extracted_info.size(); ++i)
    {
      s << indent << "  extracted_info[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::extended_object_detection::ExtractedInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.extracted_info[i]);
    }
    s << indent << "transform: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.transform);
    s << indent << "rect: ";
    s << std::endl;
    Printer< ::extended_object_detection::Rect_<ContainerAllocator> >::stream(s, indent + "  ", v.rect);
    s << indent << "contour: ";
    s << std::endl;
    Printer< ::extended_object_detection::Contour_<ContainerAllocator> >::stream(s, indent + "  ", v.contour);
    s << indent << "track: ";
    s << std::endl;
    Printer< ::extended_object_detection::Track_<ContainerAllocator> >::stream(s, indent + "  ", v.track);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXTENDED_OBJECT_DETECTION_MESSAGE_SIMPLEOBJECT_H
