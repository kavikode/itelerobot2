# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from extended_object_detection/Rect.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import extended_object_detection.msg
import geometry_msgs.msg

class Rect(genpy.Message):
  _md5sum = "b1bcb70028ba76b66f0308494067e67d"
  _type = "extended_object_detection/Rect"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """extended_object_detection/ImagePoint left_bottom
extended_object_detection/ImagePoint right_up
geometry_msgs/Vector3[] cornerTranslates    # translate to rect corners, from bottom left in clock-wice direction, if z value is 1, it means that it is unit vector in homogeneous coordnates 


================================================================================
MSG: extended_object_detection/ImagePoint
int32 x
int32 y

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['left_bottom','right_up','cornerTranslates']
  _slot_types = ['extended_object_detection/ImagePoint','extended_object_detection/ImagePoint','geometry_msgs/Vector3[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       left_bottom,right_up,cornerTranslates

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Rect, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.left_bottom is None:
        self.left_bottom = extended_object_detection.msg.ImagePoint()
      if self.right_up is None:
        self.right_up = extended_object_detection.msg.ImagePoint()
      if self.cornerTranslates is None:
        self.cornerTranslates = []
    else:
      self.left_bottom = extended_object_detection.msg.ImagePoint()
      self.right_up = extended_object_detection.msg.ImagePoint()
      self.cornerTranslates = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4i().pack(_x.left_bottom.x, _x.left_bottom.y, _x.right_up.x, _x.right_up.y))
      length = len(self.cornerTranslates)
      buff.write(_struct_I.pack(length))
      for val1 in self.cornerTranslates:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.left_bottom is None:
        self.left_bottom = extended_object_detection.msg.ImagePoint()
      if self.right_up is None:
        self.right_up = extended_object_detection.msg.ImagePoint()
      if self.cornerTranslates is None:
        self.cornerTranslates = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.left_bottom.x, _x.left_bottom.y, _x.right_up.x, _x.right_up.y,) = _get_struct_4i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cornerTranslates = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.cornerTranslates.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4i().pack(_x.left_bottom.x, _x.left_bottom.y, _x.right_up.x, _x.right_up.y))
      length = len(self.cornerTranslates)
      buff.write(_struct_I.pack(length))
      for val1 in self.cornerTranslates:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.left_bottom is None:
        self.left_bottom = extended_object_detection.msg.ImagePoint()
      if self.right_up is None:
        self.right_up = extended_object_detection.msg.ImagePoint()
      if self.cornerTranslates is None:
        self.cornerTranslates = None
      end = 0
      _x = self
      start = end
      end += 16
      (_x.left_bottom.x, _x.left_bottom.y, _x.right_up.x, _x.right_up.y,) = _get_struct_4i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cornerTranslates = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Vector3()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.cornerTranslates.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4i = None
def _get_struct_4i():
    global _struct_4i
    if _struct_4i is None:
        _struct_4i = struct.Struct("<4i")
    return _struct_4i
